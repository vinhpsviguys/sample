<<<<<<< HEAD
﻿
using System.Collections.Generic;


/*
 * Đây là enum list các loại đồ trong game
 */
public enum TypeEquipmentCharacter
{
    None = 0, Weapon, Shield, Head, Torso, Leg, Belt, Gloves, Boots, Ring, Amulet, Gem, AlchemyMaterial, Avatar, Buff, VIPCard, Scroll, HPRecovery, LuckMaterial
}

/*
 * Đây là enum list các loại phân nhóm giáp trong game ( giáp nặng, giáp nhẹ, giáp vải)
 * Mỗi class sẽ thích hợp mặc các loại nhóm giáp riêng
 */
public enum ClassCharacterItem
{
    IronArmor, LeatherArmor, SilkArmor, None
}

/*
 * Đây là độ hiếm của các item trong game
 */
public enum RarelyItem
{
    Common, Rare, Mystical, Legendary, Unique
}


/*
 * Class này thể hiện một đồ bất kỳ trong game
 */
public class EquipmentItem
{
    internal int idItem;
    internal int idItemInit;
    internal TypeEquipmentCharacter typeItem; //99 loại : 2 số đầu
    internal ClassCharacterItem classItem;
    internal RarelyItem rarelyItem;
    internal int idGroupSetItems;
    internal string nameItem;
    internal int levelRequired;
    internal int levelUpgraded;
    internal int priceItem;

    internal List<PropertiesBonus> attributeItems;

    internal Dictionary<string, object> indexes = new Dictionary<string, object>();


    internal float valueItem;
    internal int numberItem; // dành cho các item có số lượng : nguyên liệu,...

    internal void ReadBasicInfor()
    {

    }
    internal void EstimateItem()
    {
        valueItem = 0;
        for (int i = 0; i < attributeItems.Count; i++) valueItem += attributeItems[i]._valueProperty;
    }
    public EquipmentItem()
    {
        idItem = 0;
        typeItem = TypeEquipmentCharacter.None;
        CreateAttributes();
    }

    public EquipmentItem(int _idItem, int _idItemInit, TypeEquipmentCharacter _typeItem, int _idGroupSet, string _name, int _lvlRequired, int _lvlUpgraded, int _priceItem)
    {
        idItem = _idItem;
        idItemInit = _idItemInit;
        typeItem = _typeItem;
        classItem = ClassCharacterItem.IronArmor;
        rarelyItem = RarelyItem.Legendary;
        idGroupSetItems = _idGroupSet;
        nameItem = _name;
        levelRequired = _lvlRequired;
        levelUpgraded = _lvlUpgraded;
        priceItem = _priceItem;
    }

    //public EquipmentItem(int _idItem, int _idItemInit, TypeEquipmentCharacter _typeItem, int _idGroupSet, string _name, int _lvlRequired, int _lvlUpgraded, List<PropertiesBonus> _tempAttItem, int _priceItem)
    //{
    //    idItem = _idItem;
    //    idItemInit = _idItemInit;
    //    typeItem = _typeItem;
    //    classItem = ClassCharacterItem.IronArmor;
    //    rarelyItem = RarelyItem.Legendary;
    //    idGroupSetItems = _idGroupSet;
    //    nameItem = _name;
    //    levelRequired = _lvlRequired;
    //    levelUpgraded = _lvlUpgraded;
    //    attributeItems = _tempAttItem;
    //    priceItem = _priceItem;
    //}

    public EquipmentItem(int _idItem,int _idItemInit, TypeEquipmentCharacter _typeItem, int _idGroupSet, string _name, int _lvlRequired, int _lvlUpgraded, List<PropertiesBonus> _tempAttItem)
    {
        idItem = _idItem;
        idItemInit = _idItemInit;
        typeItem = _typeItem;
        classItem = ClassCharacterItem.IronArmor;
        rarelyItem = RarelyItem.Legendary;
        idGroupSetItems = _idGroupSet;
        nameItem = _name;
        levelRequired = _lvlRequired;
        levelUpgraded = _lvlUpgraded;
        attributeItems = _tempAttItem;

    }

  

    public EquipmentItem(EquipmentItem protype)
    {
        idItem = protype.idItem;
        typeItem = protype.typeItem;
        classItem = protype.classItem;
        rarelyItem = protype.rarelyItem;
        idGroupSetItems = protype.idGroupSetItems;
        nameItem = protype.nameItem;
        levelRequired = protype.levelRequired;
        levelUpgraded = protype.levelUpgraded;
        attributeItems = protype.attributeItems;
        valueItem = protype.valueItem;
        numberItem = protype.numberItem;
    }
    public EquipmentItem(int id, int type)
    {
        idItem = id;
        typeItem = MappingData.ConvertStringToTypeItem(type);
        CreateAttributes();
    }
    public EquipmentItem(int id, TypeEquipmentCharacter _type)
    {
        idItem = id;
        typeItem = _type;
        levelRequired = 0;
        CreateAttributes();
    }

    private void CreateAttributes()
    {
        attributeItems = new List<PropertiesBonus>();
        int number = 5;// Random.Range(1, 11);
        for (int i = 0; i < number; i++) attributeItems.Add(new PropertiesBonus());
        EstimateItem();
    }
    public void RemoveItem()
    {
        idItem = 0;
        typeItem = TypeEquipmentCharacter.None;
        classItem = ClassCharacterItem.None;
        rarelyItem = RarelyItem.Common;
        idGroupSetItems = -1;
        nameItem = string.Empty;
        levelRequired = 0;
        levelUpgraded = 0;
        attributeItems = new List<PropertiesBonus>();
        valueItem = 0;
        numberItem = 1;
    }

    public object getValue(string field, object value)
    {
        return (indexes.ContainsKey(field) ? indexes[field] : value);
    }

    public object getValue(string field)
    {
        return (indexes.ContainsKey(field) ? indexes[field] : 0);
    }

    public void setValue(string field, object value)
    {
        if (indexes.ContainsKey(field)) indexes.Remove(field);
        indexes.Add(field, value);
    }
}
=======
﻿
using System.Collections.Generic;


/*
 * Đây là enum list các loại đồ trong game
 */
public enum TypeEquipmentCharacter
{
    None = 0, Weapon, Shield, Head, Torso, Leg, Belt, Gloves, Boots, Ring, Amulet, Gem, AlchemyMaterial, Avatar, Buff, VIPCard, Scroll, HPRecovery, LuckMaterial
}

/*
 * Đây là enum list các loại phân nhóm giáp trong game ( giáp nặng, giáp nhẹ, giáp vải)
 * Mỗi class sẽ thích hợp mặc các loại nhóm giáp riêng
 */
public enum ClassCharacterItem
{
    IronArmor, LeatherArmor, SilkArmor, None
}

/*
 * Đây là độ hiếm của các item trong game
 */
public enum RarelyItem
{
    Common, Rare, Mystical, Legendary, Unique
}


/*
 * Class này thể hiện một đồ bất kỳ trong game
 */
public class EquipmentItem
{
    internal int idItem;
    internal int idItemInit;
    internal TypeEquipmentCharacter typeItem; //99 loại : 2 số đầu
    internal ClassCharacterItem classItem;
    internal RarelyItem rarelyItem;
    internal int idGroupSetItems;
    internal string nameItem;
    internal int levelRequired;
    internal int levelUpgraded;
    internal int priceItem;

    internal List<PropertiesBonus> attributeItems;

    public Dictionary<string, object> indexes = new Dictionary<string, object>();


    internal float valueItem;
    internal int numberItem; // dành cho các item có số lượng : nguyên liệu,...

    internal void ReadBasicInfor()
    {

    }
    internal void EstimateItem()
    {
        valueItem = 0;
        for (int i = 0; i < attributeItems.Count; i++) valueItem += attributeItems[i]._valueProperty;
    }
    public EquipmentItem()
    {
        idItem = 0;
        typeItem = TypeEquipmentCharacter.None;
        CreateAttributes();
    }

    public EquipmentItem(int _idItem, int _idItemInit, TypeEquipmentCharacter _typeItem, int _idGroupSet, string _name, int _lvlRequired, int _lvlUpgraded, int _priceItem)
    {
        idItem = _idItem;
        idItemInit = _idItemInit;
        typeItem = _typeItem;
        classItem = ClassCharacterItem.IronArmor;
        rarelyItem = RarelyItem.Legendary;
        idGroupSetItems = _idGroupSet;
        nameItem = _name;
        levelRequired = _lvlRequired;
        levelUpgraded = _lvlUpgraded;
        priceItem = _priceItem;
    }

    //public EquipmentItem(int _idItem, int _idItemInit, TypeEquipmentCharacter _typeItem, int _idGroupSet, string _name, int _lvlRequired, int _lvlUpgraded, List<PropertiesBonus> _tempAttItem, int _priceItem)
    //{
    //    idItem = _idItem;
    //    idItemInit = _idItemInit;
    //    typeItem = _typeItem;
    //    classItem = ClassCharacterItem.IronArmor;
    //    rarelyItem = RarelyItem.Legendary;
    //    idGroupSetItems = _idGroupSet;
    //    nameItem = _name;
    //    levelRequired = _lvlRequired;
    //    levelUpgraded = _lvlUpgraded;
    //    attributeItems = _tempAttItem;
    //    priceItem = _priceItem;
    //}

    public EquipmentItem(int _idItem,int _idItemInit, TypeEquipmentCharacter _typeItem, int _idGroupSet, string _name, int _lvlRequired, int _lvlUpgraded, List<PropertiesBonus> _tempAttItem)
    {
        idItem = _idItem;
        idItemInit = _idItemInit;
        typeItem = _typeItem;
        classItem = ClassCharacterItem.IronArmor;
        rarelyItem = RarelyItem.Legendary;
        idGroupSetItems = _idGroupSet;
        nameItem = _name;
        levelRequired = _lvlRequired;
        levelUpgraded = _lvlUpgraded;
        attributeItems = _tempAttItem;

    }

  

    public EquipmentItem(EquipmentItem protype)
    {
        idItem = protype.idItem;
        typeItem = protype.typeItem;
        classItem = protype.classItem;
        rarelyItem = protype.rarelyItem;
        idGroupSetItems = protype.idGroupSetItems;
        nameItem = protype.nameItem;
        levelRequired = protype.levelRequired;
        levelUpgraded = protype.levelUpgraded;
        attributeItems = protype.attributeItems;
        valueItem = protype.valueItem;
        numberItem = protype.numberItem;
    }
    public EquipmentItem(int id, int type)
    {
        idItem = id;
        typeItem = MappingData.ConvertStringToTypeItem(type);
        CreateAttributes();
    }
    public EquipmentItem(int id, TypeEquipmentCharacter _type)
    {
        idItem = id;
        typeItem = _type;
        levelRequired = 0;
        CreateAttributes();
    }

    private void CreateAttributes()
    {
        attributeItems = new List<PropertiesBonus>();
        int number = 5;// Random.Range(1, 11);
        for (int i = 0; i < number; i++) attributeItems.Add(new PropertiesBonus());
        EstimateItem();
    }
    public void RemoveItem()
    {
        idItem = 0;
        typeItem = TypeEquipmentCharacter.None;
        classItem = ClassCharacterItem.None;
        rarelyItem = RarelyItem.Common;
        idGroupSetItems = -1;
        nameItem = string.Empty;
        levelRequired = 0;
        levelUpgraded = 0;
        attributeItems = new List<PropertiesBonus>();
        valueItem = 0;
        numberItem = 1;
    }

    public object getValue(string field, object value)
    {
        return (indexes.ContainsKey(field) ? indexes[field] : value);
    }

    public object getValue(string field)
    {
        return (indexes.ContainsKey(field) ? indexes[field] : 0);
    }

    public void setValue(string field, object value)
    {
        if (indexes.ContainsKey(field)) indexes.Remove(field);
        indexes.Add(field, value);
    }
}
>>>>>>> origin/master
